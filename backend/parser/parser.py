import time
import random
from concurrent.futures import ThreadPoolExecutor
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from fake_useragent import UserAgent
from database import save_groups, save_schedule

# URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
GROUPS_URL = "https://mai.ru/education/studies/schedule/groups.php?department=–ò–Ω—Å—Ç–∏—Ç—É—Ç+‚Ññ8&course=all"
BASE_SCHEDULE_URL = "https://mai.ru/education/studies/schedule/index.php?group={group}&week={week}"

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
MAX_THREADS = 6


def get_driver():
    """–°–æ–∑–¥–∞–µ—Ç Selenium-–¥—Ä–∞–π–≤–µ—Ä —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º User-Agent."""
    ua = UserAgent()
    user_agent = ua.random

    options = webdriver.EdgeOptions()
    options.add_argument(f"user-agent={user_agent}")
    options.add_argument("--headless")
    options.add_argument("--disable-blink-features=AutomationControlled")

    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()), options=options)
    return driver


def close_popups(driver):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ (–∫—É–∫–∏, –∞–ª–µ—Ä—Ç—ã) –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    try:
        cookie_banner = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.ID, "cookie_message"))
        )
        driver.execute_script("arguments[0].style.display = 'none';", cookie_banner)
        print("‚úÖ –ö—É–∫–∏-–±–∞–Ω–Ω–µ—Ä —Å–∫—Ä—ã—Ç")
    except Exception:
        pass  # –ï—Å–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞ –Ω–µ—Ç, –∏–¥–µ–º –¥–∞–ª—å—à–µ


def scrape_groups():
    """
    –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å —Å–∞–π—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞: {"name": <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã>, "link": <—Å—Å—ã–ª–∫–∞>}.
    """
    driver = get_driver()
    driver.get(GROUPS_URL)
    wait = WebDriverWait(driver, 10)
    time.sleep(random.uniform(2, 5))

    close_popups(driver)

    groups = []
    tabs = driver.find_elements(By.CSS_SELECTOR, "ul.nav.nav-segment.nav-pills.nav-fill a.nav-link")

    for tab in tabs:
        try:
            driver.execute_script("arguments[0].scrollIntoView();", tab)
            driver.execute_script("arguments[0].click();", tab)
            time.sleep(random.uniform(2, 4))
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "a.btn.btn-soft-secondary")))
            elements = driver.find_elements(By.CSS_SELECTOR, "a.btn.btn-soft-secondary.btn-xs.mb-1.fw-medium.btn-group")
            for elem in elements:
                group_name = elem.text.strip()
                group_link = elem.get_attribute("href")
                if group_name and group_link:
                    groups.append({"name": group_name, "link": group_link})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∫–ª–∞–¥–∫–∏: {e}")

    driver.quit()
    return groups


def get_schedule_for_group(group_name):
    """
    –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –Ω–µ–¥–µ–ª—è–º —Å 7 –ø–æ 19.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –ø–æ–ª—è–º–∏: week, day, start_time, end_time, subject, teacher, room.
    """
    schedule = []
    driver = get_driver()

    for week in range(7, 20):  # –ù–µ–¥–µ–ª–∏ —Å 7 –ø–æ 19 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        week_url = BASE_SCHEDULE_URL.format(group=group_name, week=week)
        driver.get(week_url)
        time.sleep(random.uniform(2, 5))

        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "li.step-item"))
            )
        except Exception:
            print(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—è {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue

        days = driver.find_elements(By.CSS_SELECTOR, "li.step-item")
        if not days:
            print(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—è {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue

        print(f"üìÖ –ü–∞—Ä—Å–∏–º –Ω–µ–¥–µ–ª—é {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}...")
        for day in days:
            try:
                day_name = day.find_element(By.CSS_SELECTOR, "span.step-title").text.strip()
                lessons = day.find_elements(By.CSS_SELECTOR, "div.mb-4")
                for lesson in lessons:
                    subject_elem = lesson.find_element(By.CSS_SELECTOR, "p.mb-2.fw-semi-bold.text-dark")
                    subject = subject_elem.text.strip().rsplit(" ", 1)[0]  # –£–±–∏—Ä–∞–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–ö, –ü–ó)

                    time_range_elem = lesson.find_elements(By.CSS_SELECTOR, "li.list-inline-item")
                    if time_range_elem:
                        time_text = time_range_elem[0].text.strip()
                        if "‚Äì" in time_text:
                            start_time, end_time = [t.strip() for t in time_text.split("‚Äì")]
                        else:
                            start_time, end_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    else:
                        start_time, end_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    teacher_elem = lesson.find_elements(By.CSS_SELECTOR, "a.text-body")
                    teacher = teacher_elem[0].text.strip() if teacher_elem else "–ù–µ —É–∫–∞–∑–∞–Ω"

                    room_elem = lesson.find_elements(By.XPATH,
                                                     ".//li[contains(text(),'–ì–£–ö') or contains(text(),'–∫–∞—Ñ')]")
                    room = room_elem[0].text.strip() if room_elem else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                    schedule.append({
                        "week": week,
                        "day": day_name,
                        "start_time": start_time,
                        "end_time": end_time,
                        "subject": subject,
                        "teacher": teacher,
                        "room": room
                    })

                    print(f"‚úÖ {day_name}: {subject} ({start_time}-{end_time}), {teacher}, {room}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã: {e}")
                print(f"üìÑ HTML –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:\n{day.get_attribute('outerHTML')}")

    driver.quit()
    return schedule


def process_group_schedule(group):
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î."""
    group_name = group["name"]
    print(f"üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}...")
    schedule = get_schedule_for_group(group_name)
    save_schedule(group_name, schedule)
    print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


if __name__ == "__main__":
    # 1. –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...")
    groups = scrape_groups()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø.")

    # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –ë–î
    save_groups(groups)
    print("‚úÖ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")

    # 3. –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (–Ω–µ–¥–µ–ª–∏ —Å 7 –ø–æ 19)
    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        executor.map(process_group_schedule, groups)

    print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!")
