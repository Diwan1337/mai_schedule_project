axios.defaults.baseURL = 'http://127.0.0.1:5000';  // Base URL of backend API

let token = '';
let isAdmin = false;  // –§–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

// –°–º–µ—â–µ–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –Ω–µ–¥–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ISO-–Ω—É–º–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è = ISO-–Ω–µ–¥–µ–ª—è 7)
const ACADEMIC_WEEK_OFFSET = 6;

function parseItemDate(str) {
  const months = {
    '—è–Ω–≤–∞—Ä—è':1, '—Ñ–µ–≤—Ä–∞–ª—è':2, '–º–∞—Ä—Ç–∞':3, '–∞–ø—Ä–µ–ª—è':4, '–º–∞—è':5, '–∏—é–Ω—è':6,
    '–∏—é–ª—è':7, '–∞–≤–≥—É—Å—Ç–∞':8, '—Å–µ–Ω—Ç—è–±—Ä—è':9, '–æ–∫—Ç—è–±—Ä—è':10, '–Ω–æ—è–±—Ä—è':11, '–¥–µ–∫–∞–±—Ä—è':12
  };
  // str format: "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏, D Monthname"
  const parts = str.split(',')[1].trim().split(' ');
  const day = parseInt(parts[0], 10);
  const month = months[parts[1]] - 1;
  const year = new Date().getFullYear();
  return new Date(year, month, day);
}

function getDateOfISOWeek(w, y) {
  const simple = new Date(y, 0, 1 + (w - 1) * 7);
  const dow = simple.getDay() || 7;
  if (dow <= 4) {
    simple.setDate(simple.getDate() - dow + 1);
  } else {
    simple.setDate(simple.getDate() + 8 - dow);
  }
  return simple;
}


$(function() {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã)
  axios.get('/groups').then(res => {
    $('#addGroup').autocomplete({ source: res.data });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è datepicker –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è
  $('#addDate').datepicker({
    dateFormat: 'dd.mm.yy',
    regional: 'ru'
  });


  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–ª—å (1-19 —É—á–µ–±–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–∞—Ç)
  const year = new Date().getFullYear();
  for (let w = 1; w <= 19; w++) {
    const isoWeek = w + ACADEMIC_WEEK_OFFSET;
    const start = getDateOfISOWeek(isoWeek, year);
    const end = new Date(start);
    end.setDate(start.getDate() + 6);
    const formatDate = d => String(d.getDate()).padStart(2, '0') + '.' + String(d.getMonth()+1).padStart(2, '0');
    $('#roomWeekInput').append(
      `<option value="${w}">${w} (${formatDate(start)} ‚Äì ${formatDate(end)})</option>`
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π API), –∏–Ω–∞—á–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  axios.get('/allowed_rooms').then(res => {
    const rooms = res.data;
    rooms.forEach(room => {
      $('#roomSelect').append(`<option value="${room}">${room}</option>`);
    });
  }).catch(() => {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤');
  });



  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –Ω–µ–¥–µ–ª–∏
  $('#roomSelect, #roomWeekInput').change(function() {
    const roomChosen = $('#roomSelect').val();
    const weekChosen = $('#roomWeekInput').val();
    $('#loadRoomsBtn').prop('disabled', !(roomChosen && weekChosen));
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  $('#registerBtn').click(async function register() {
    const email = $('#regEmail').val().trim();
    const password = $('#regPassword').val().trim();
    try {
      await axios.post('/register', { email, password });
      alert('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.');
      $('#registerModal').modal('hide');
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + (e.response?.data?.msg || e));
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
  $('#loginBtn').click(async function login() {
    const email = $('#email').val().trim();
    const password = $('#password').val().trim();
    try {
      const res = await axios.post('/login', { email, password });
      token = res.data.access_token;
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      console.log("üîê –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", token);
      $('#loginStatus').text('‚úî –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      $('#loginModal').modal('hide');
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      $('#loginLink, #registerLink').addClass('d-none');
      $('#logoutLink').removeClass('d-none');
      isAdmin = !!res.data.is_admin;
      if (isAdmin) {
        $('#addBtn').removeClass('d-none');
        $('#deleteBtn').removeClass('d-none');
        $('#manageUsersNav').removeClass('d-none');  // –ø–æ–∫–∞–∑–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
      }
      // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ –≤—Ö–æ–¥–∞, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ (—á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è)
      if ($('#roomsBody').children().length > 0) {
        loadRooms();
      }
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + (e.response?.data?.msg || e));
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
  $('#logoutLink').click(function logout() {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = '';
    delete axios.defaults.headers.common['Authorization'];
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    isAdmin = false;
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∞
    $('#manageUsersNav').addClass('d-none');
    $('#addBtn').addClass('d-none');
    $('.delete-btn').remove();  // —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    $('#logoutLink').addClass('d-none');
    $('#loginLink, #registerLink').removeClass('d-none');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã: –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–±–∏–Ω–µ—Ç–∞
  $('#addModal').on('show.bs.modal', function() {
    const room = $('#roomSelect').val() || '';
    $('#addModalLabel').text(room ? `–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É ‚Äì ${room}` : '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É');
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã (–≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ)
  $('#addPairBtn').click(async function addPair() {
    const groupName   = $('#addGroup').val().trim();
    const subject     = $('#addSubject').val().trim();
    const teacherName = $('#addTeacher').val().trim();
    const rawDateStr  = $('#addDate').val().trim();
    const startTime   = $('#addStartTime').val();
    const endTime     = $('#addEndTime').val();
    const room        = $('#roomSelect').val();
    const week        = $('#roomWeekInput').val();

    if (!groupName || !subject || !teacherName || !rawDateStr || !startTime || !endTime) {
      return alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
    }

    // üìÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ "–ü–Ω, 19 –º–∞—è"
    const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const months = [
      '', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
      '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];

    let formattedDay = rawDateStr;
    if (/^\d{2}\.\d{2}\.\d{4}$/.test(rawDateStr)) {
      const [day, month, year] = rawDateStr.split('.').map(Number);
      const d = new Date(year, month - 1, day);
      const weekdayStr = weekdays[d.getDay()];
      const monthStr = months[month];
      formattedDay = `${weekdayStr}, ${day} ${monthStr}`;
    }

    const newEntry = {
      week: Number(week),
      group_name: groupName,
      subject: subject,
      teachers: [teacherName],
      rooms: [room],
      date: formattedDay,
      time: `${startTime} - ${endTime}`
    };

    try {
      const checkRes = await axios.get('/schedule', {
        params: { group: groupName, week: week }
      });

      const exists = checkRes.data.some(item =>
        item.date === formattedDay &&
        item.time === `${startTime} - ${endTime}` &&
        item.rooms.includes(room)
      );

      if (exists) {
        return alert("‚ùå –¢–∞–∫–∞—è –ø–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!");
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π:", e);
      return alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏");
    }


    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º:", JSON.stringify(newEntry, null, 2));
    console.log("üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:");
    console.log({
      week, groupName, subject, teacherName, rawDateStr, startTime, endTime, room
    });
    console.log("üì§ –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", axios.defaults.headers.common['Authorization']);

    try {
      await axios.post('/schedule', newEntry, {
        headers: { 'Content-Type': 'application/json' }
      });
      console.log("‚úÖ –ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      $('#addModal').modal('hide');
      loadRooms();
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ' + (e.response?.data?.msg || e.message));
    }
  });

  $('#usersModal').on('show.bs.modal', loadUsers);

});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
async function loadRooms() {
  console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...");
  console.log("   üè´ –ö–∞–±–∏–Ω–µ—Ç:", $('#roomSelect').val());
  console.log("   üìÜ –ù–µ–¥–µ–ª—è:", $('#roomWeekInput').val());

  const room = $('#roomSelect').val();
  const week = $('#roomWeekInput').val();
  if (!room || !week) {
    return alert('–£–∫–∞–∂–∏—Ç–µ –∏ –∫–∞–±–∏–Ω–µ—Ç, –∏ –Ω–µ–¥–µ–ª—é.');
  }
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
    const res = await axios.get('/occupied_rooms');
    console.log("üì• –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (occupied_rooms):", res.data);
    res.data.forEach((item, i) => {
      if (!item.start_time || !item.end_time || !/^\d{2}:\d{2}$/.test(item.start_time)) {
        console.warn(`‚ö†Ô∏è –ü–ª–æ—Ö–æ–π item #${i}:`, item);
      }
    });
    let data = res.data.filter(item => String(item.week) === String(week) && item.room === room);
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    data.sort((a, b) => {
      const dateA = parseItemDate(a.day);
      const dateB = parseItemDate(b.day);
      if (dateA - dateB !== 0) {
        return dateA - dateB;
      }
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (—á–∞—Å—ã*60 + –º–∏–Ω—É—Ç—ã)
      const [h1, m1] = a.start_time.split(/[:‚Äì‚Äî\-]/).map(x => +x);
      const [h2, m2] = b.start_time.split(/[:‚Äì‚Äî\-]/).map(x => +x);
      return (h1 * 60 + m1) - (h2 * 60 + m2);
    });
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    const tbody = $('#roomsBody').empty();
    data.forEach(item => {
      const subj = item.subject || '';
      const teach = item.teacher || '';
      const group = item.group_name || '';
      // –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –ø–æ ID
      let actionCell = '';
      if (isAdmin && item.id !== undefined) {
        actionCell = `<button class="btn btn-sm btn-danger delete-btn" onclick="deleteSchedule(${item.id})">–£–¥–∞–ª–∏—Ç—å</button>`;
      }
      console.log("üìã –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É:", item);
      tbody.append(`
        <tr>
          <td>${item.day}</td>
          <td>${item.start_time} ‚Äì ${item.end_time}</td>
          <td>${subj}</td>
          <td>${teach}</td>
          <td>${group}</td>
          <td>${actionCell}</td>
        </tr>
      `);
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    $('#roomsTable').removeClass('d-none');
    $('#freeStatus').empty();
    if ($('#freeNow').prop('checked')) {
      const now = new Date();
      let free = true;
      for (let item of data) {
        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        const classDate = parseItemDate(item.day);
        if (classDate.getDate() === now.getDate() &&
            classDate.getMonth() === now.getMonth() &&
            classDate.getFullYear() === now.getFullYear()) {
          // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
          const [hStart, mStart] = item.start_time.split(':').map(x => +x);
          const [hEnd, mEnd] = item.end_time.split(':').map(x => +x);
          const classStartMin = hStart * 60 + mStart;
          const classEndMin = hEnd * 60 + mEnd;
          const nowMin = now.getHours() * 60 + now.getMinutes();
          if (nowMin >= classStartMin && nowMin < classEndMin) {
            free = false;
            break;
          }
        }
      }
      if (free) {
        $('#freeStatus').html(`<div class="alert alert-success">–ö–∞–±–∏–Ω–µ—Ç —Å–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–µ–Ω</div>`);
      } else {
        $('#freeStatus').html(`<div class="alert alert-danger">–ö–∞–±–∏–Ω–µ—Ç —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç</div>`);
      }
    }
  } catch {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞');
  }
}

window.promoteUser = async function(id) {
  if (!confirm("–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º?")) return;
  try {
    await axios.post(`/users/${id}/promote`);
    alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º");
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏:", e);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å");
    return;
  }

  try {
    await loadUsers();  // –µ—Å–ª–∏ –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–∫–∞–∂–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", e);
    alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫");
  }
};

window.loadUsers = async function() {
  try {
    const res = await axios.get('/users');
    const users = res.data;
    const tbody = $('#usersTableBody').empty();
    users.forEach(u => {
      const btn = (u.role === 'admin') ? '' :
        `<button class="btn btn-sm btn-warning" onclick="promoteUser(${u.id})">–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º</button>`;
      tbody.append(`
        <tr>
          <td>${u.id}</td>
          <td>${u.email}</td>
          <td>${u.role}</td>
          <td>${btn}</td>
        </tr>
      `);
    });
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  }
}


// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async function deleteSchedule(id) {
  console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É ID:", id);
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) return;
  try {
    await axios.delete(`/schedule/${id}`);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    loadRooms();
  } catch {
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
}
