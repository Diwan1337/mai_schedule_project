import os
import sqlite3

# –°–ø–∏—Å–æ–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
ALLOWED_IT_ROOMS = {
    "–ì–£–ö –ë-416", "–ì–£–ö –ë-362", "–ì–£–ö –ë-434", "–ì–£–ö –ë-436", "–ì–£–ö –ë-422",
    "–ì–£–ö –ë-438", "–ì–£–ö –ë-440", "–ì–£–ö –ë-417", "–ì–£–ö –ë-426", "–ì–£–ö –ë-415",
    "–ì–£–ö –ë-324", "–ì–£–ö –ë-325", "–ì–£–ö –ë-326", "–ì–£–ö –ë-418", "–ì–£–ö –ë-420"
}

# –ü—É—Ç—å –¥–æ –ë–î parser/mai_schedule.db (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
BASE_DIR   = os.path.dirname(os.path.abspath(__file__))
PARSER_DIR = os.path.abspath(os.path.join(BASE_DIR, "..", "parser"))
DB_PATH    = os.path.join(PARSER_DIR, "mai_schedule.db")


def setup_db(conn: sqlite3.Connection):
    cur = conn.cursor()

    # --- –ú–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–µ–∑ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, —É–¥–∞–ª—è–µ–º –µ—ë ---
    cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='occupied_rooms';")
    if cur.fetchone():
        cur.execute("PRAGMA table_info(occupied_rooms);")
        cols = [row[1] for row in cur.fetchall()]
        # –µ—Å–ª–∏ –Ω–µ—Ç start_time ‚Äî —ç—Ç–æ —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞, —Å–Ω–æ—Å–∏–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        if "start_time" not in cols:
            print("üóë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ occupied_rooms, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã...")
            cur.execute("DROP TABLE IF EXISTS occupied_rooms;")
            cur.execute("DROP TABLE IF EXISTS free_rooms;")
            conn.commit()

    # --- –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ —Å –Ω—É–∂–Ω–æ–π —Å—Ö–µ–º–æ–π ---
    cur.execute("""
        CREATE TABLE IF NOT EXISTS occupied_rooms (
            week        INTEGER,
            day         TEXT,
            start_time  TEXT,
            end_time    TEXT,
            room        TEXT,
            subject     TEXT,
            teacher     TEXT,
            group_name  TEXT,
            weekday     TEXT,
            PRIMARY KEY (week, day, start_time, end_time, room)
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS free_rooms (
            week       INTEGER,
            day        TEXT,
            start_time TEXT,
            end_time   TEXT,
            room       TEXT,
            PRIMARY KEY (week, day, start_time, end_time, room)
        );
    """)
    conn.commit()


def get_occupied_rooms(conn: sqlite3.Connection):
    """
    –ë–µ—Ä—ë–º –∏–∑ schedule –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ ALLOWED_IT_ROOMS,
    –≤—ã–¥–µ–ª—è–µ–º weekday –∏–∑ day –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π:
    (week, day, start_time, end_time, room, subject, teacher, group_name, weekday)
    """
    cur = conn.cursor()
    placeholders = ",".join("?" for _ in ALLOWED_IT_ROOMS)
    sql = f"""
        SELECT week, day, start_time, end_time, room, subject, teacher, group_name
        FROM schedule
        WHERE room IN ({placeholders})
    """
    cur.execute(sql, tuple(ALLOWED_IT_ROOMS))
    rows = cur.fetchall()

    occupied = []
    for week, day_str, start, end, room, subj, teacher, grp in rows:
        weekday = day_str.split(",", 1)[0].strip()
        occupied.append((week, day_str, start, end, room, subj, teacher, grp, weekday))
    return occupied


def get_free_rooms(occupied):
    """
    –°—Ç—Ä–æ–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–≥–æ –¥–ª—è —Ç–µ—Ö weeks/days/slots,
    –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ –≤ occupied.
    """
    weeks = sorted({rec[0] for rec in occupied})
    days  = sorted({rec[1] for rec in occupied})
    slots = sorted({(rec[2], rec[3]) for rec in occupied})

    occupied_set = {
        (week, day, start, end, room)
        for week, day, start, end, room, *_ in occupied
    }

    free = []
    for week in weeks:
        for day in days:
            for start, end in slots:
                for room in ALLOWED_IT_ROOMS:
                    key = (week, day, start, end, room)
                    if key not in occupied_set:
                        free.append(key)
    return free


def save_filtered_data():
    conn = sqlite3.connect(DB_PATH)
    try:
        # 1) –ú–∏–≥—Ä–∞—Ü–∏—è + (re)—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        setup_db(conn)
        cur = conn.cursor()

        # 2) –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        cur.execute("DELETE FROM occupied_rooms;")
        cur.execute("DELETE FROM free_rooms;")

        # 3) –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
        occupied = get_occupied_rooms(conn)
        # –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ (week, day, start, end, room)
        uniq = {}
        for rec in occupied:
            key = rec[:5]
            if key not in uniq:
                uniq[key] = rec
        occ_list = list(uniq.values())

        cur.executemany(
            "INSERT OR IGNORE INTO occupied_rooms "
            "(week, day, start_time, end_time, room, subject, teacher, group_name, weekday) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);",
            occ_list
        )

        # 4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        free = get_free_rooms(occ_list)
        cur.executemany(
            "INSERT OR IGNORE INTO free_rooms "
            "(week, day, start_time, end_time, room) VALUES (?, ?, ?, ?, ?);",
            free
        )

        conn.commit()
        print("‚úÖ occupied_rooms –∏ free_rooms –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    finally:
        conn.close()


if __name__ == "__main__":
    save_filtered_data()
