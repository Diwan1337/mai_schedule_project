import sqlite3

DB_PATH = "mai_schedule.db"

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            link TEXT
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            group_name TEXT,
            week INTEGER,
            day TEXT,
            start_time TEXT,         -- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è
            end_time TEXT,           -- –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
            subject TEXT,
            teacher TEXT,
            room TEXT,
            event_type TEXT DEFAULT '—Ä–∞–∑–æ–≤–æ–µ',         -- –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: —Ä–∞–∑–æ–≤–æ–µ/–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
            recurrence_pattern TEXT DEFAULT '',         -- –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é" –∏–ª–∏ "–ø–æ –≤–µ—Ä—Ö–Ω–µ–π/–Ω–∏–∂–Ω–µ–π")
            google_event_id TEXT DEFAULT NULL,
            is_custom INTEGER DEFAULT 0,                -- –§–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (1 - –∏–∑–º–µ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)
            FOREIGN KEY(group_name) REFERENCES groups(name)
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE,
            password TEXT,
            role TEXT
        )
    ''')

    conn.commit()
    conn.close()


def save_groups(groups):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ –ë–î."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    for group in groups:
        try:
            cursor.execute("INSERT INTO groups (name, link) VALUES (?, ?)", (group["name"], group["link"]))
        except sqlite3.IntegrityError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    conn.commit()
    conn.close()


def get_groups():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ –ë–î."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT name, link FROM groups")
    groups = [{"name": row[0], "link": row[1]} for row in cursor.fetchall()]

    conn.close()
    return groups


def save_schedule(group_name, schedule):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ schedule ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
      week, day, start_time, end_time, subject, teacher, room.
    –î–ª—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é event_type='—Ä–∞–∑–æ–≤–æ–µ' –∏ recurrence_pattern='' .
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    if not schedule:
        print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.")
        return

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(schedule)} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è {group_name}...")

    for lesson in schedule:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ is_custom, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cursor.execute('''
            INSERT INTO schedule (
                group_name, week, day, start_time, end_time, subject, teacher, room, event_type, recurrence_pattern
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            group_name,
            lesson["week"],
            lesson["day"],
            lesson.get("start_time", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            lesson.get("end_time", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            lesson["subject"],
            lesson["teacher"],
            lesson["room"],
            "—Ä–∞–∑–æ–≤–æ–µ",   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
            ""
        ))

    conn.commit()
    conn.close()
    print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


def query_db(query, args=(), one=False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(query, args)
    result = cursor.fetchall()
    conn.close()
    return (result[0] if result else None) if one else result


def execute_db(query, args=()):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å (INSERT, UPDATE, DELETE) –∏ –∫–æ–º–º–∏—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(query, args)
    conn.commit()
    conn.close()


# –ü—Ä–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–∞–±–ª–∏—Ü—ã.
create_tables()
