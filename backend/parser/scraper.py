import time
import random
from concurrent.futures import ThreadPoolExecutor
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from fake_useragent import UserAgent
from database import get_groups, save_schedule
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
BASE_SCHEDULE_URL = "https://mai.ru/education/studies/schedule/index.php?group={group}&week={week}"

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
MAX_THREADS = 5  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 3-5, –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç


def get_driver():
    """–°–æ–∑–¥–∞–µ—Ç Selenium-–¥—Ä–∞–π–≤–µ—Ä —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º User-Agent"""
    ua = UserAgent()
    user_agent = ua.random

    options = webdriver.EdgeOptions()
    options.add_argument(f"user-agent={user_agent}")
    options.add_argument("--headless")  # –ë–µ–∑ GUI
    options.add_argument("--disable-blink-features=AutomationControlled")

    driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()), options=options)
    return driver


def get_schedule(group_name):
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å 1 –ø–æ 17 –Ω–µ–¥–µ–ª—é"""
    schedule = []
    driver = get_driver()

    for week in range(5, 18):
        week_url = BASE_SCHEDULE_URL.format(group=group_name, week=week)
        driver.get(week_url)
        time.sleep(random.uniform(2, 5))  # –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è

        # ‚úÖ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        try:
            WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "li.step-item"))
            )
        except:
            print(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—è {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue

        days = driver.find_elements(By.CSS_SELECTOR, "li.step-item")

        if not days:
            print(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—è {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            continue

        print(f"üìÖ –ü–∞—Ä—Å–∏–º –Ω–µ–¥–µ–ª—é {week} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}...")

        for day in days:
            try:
                day_name = day.find_element(By.CSS_SELECTOR, "span.step-title").text.strip()

                # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –∑–∞ –¥–µ–Ω—å
                lessons = day.find_elements(By.CSS_SELECTOR, "div.mb-4")

                for lesson in lessons:
                    subject_elem = lesson.find_element(By.CSS_SELECTOR, "p.mb-2.fw-semi-bold.text-dark")
                    subject = subject_elem.text.strip().rsplit(" ", 1)[0]  # –£–±–∏—Ä–∞–µ–º "–õ–ö", "–ü–ó" –∏ —Ç.–¥.

                    time_range_elem = lesson.find_elements(By.CSS_SELECTOR, "li.list-inline-item")
                    if len(time_range_elem) > 0:
                        start_time, end_time = time_range_elem[0].text.strip().split(" ‚Äì ")
                    else:
                        start_time, end_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    teacher_elem = lesson.find_elements(By.CSS_SELECTOR, "a.text-body")
                    teacher = teacher_elem[0].text.strip() if teacher_elem else "–ù–µ —É–∫–∞–∑–∞–Ω"

                    # ‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                    room_elem = lesson.find_elements(By.XPATH, ".//li[contains(text(),'–ì–£–ö') or contains(text(),'–∫–∞—Ñ')]")
                    room = room_elem[0].text.strip() if room_elem else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                    schedule.append({
                        "week": week,
                        "day": day_name,
                        "time": f"{start_time} - {end_time}",
                        "subject": subject,
                        "teacher": teacher,
                        "room": room
                    })

                    print(f"‚úÖ {day_name}: {subject} ({start_time}-{end_time}), {teacher}, {room}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã: {e}")
                print(f"üìÑ HTML –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:\n{day.get_attribute('outerHTML')}")

    driver.quit()
    return schedule


def process_group(group):
    """–ü–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_name = group["name"]
    print(f"üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {group_name}...")
    schedule = get_schedule(group_name)
    save_schedule(group_name, schedule)
    print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")


if __name__ == "__main__":
    groups = get_groups()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        executor.map(process_group, groups)

    print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!")
