from flask import Flask, request, jsonify
from flask_jwt_extended import (
    JWTManager, create_access_token, jwt_required, get_jwt_identity
)
from database import create_tables, query_db, execute_db
from google_sync import sync_group_to_calendar

app = Flask(__name__)
app.config["JWT_SECRET_KEY"] = "super-secret"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
jwt = JWTManager(app)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (—É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤ create_tables –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ–ª—è)
create_tables()


### ---------- –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ---------- ###
@app.route("/register", methods=["POST"])
def register_user():
    """
    üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {"email": "...", "password": "...", "role": "..."}. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é role="student".
    """
    data = request.json
    email = data.get("email")
    password = data.get("password")
    role = data.get("role", "student")

    execute_db(
        "INSERT INTO users (email, password, role) VALUES (?, ?, ?)",
        (email, password, role)
    )
    return jsonify({"msg": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}), 201


@app.route("/login", methods=["POST"])
def login_user():
    """
    üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JWT-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è).
    –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {"email": "...", "password": "..."}.
    """
    data = request.json
    email = data.get("email")
    password = data.get("password")

    user = query_db(
        "SELECT id, password, role FROM users WHERE email = ?",
        (email,), one=True
    )
    if not user or user[1] != password:
        return jsonify({"msg": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"}), 401

    user_id = user[0]
    user_role = user[2]
    access_token = create_access_token(
        identity={"user_id": user_id, "role": user_role}
    )
    return jsonify(access_token=access_token), 200


### ---------- –ì–†–£–ü–ü–´ ---------- ###
@app.route("/groups", methods=["GET"])
def get_groups():
    """üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø."""
    groups = query_db("SELECT name FROM groups")
    return jsonify([g[0] for g in groups])


### ---------- –†–ê–°–ü–ò–°–ê–ù–ò–ï ---------- ###
@app.route("/schedule", methods=["GET"])
def get_schedule():
    """
    üìÜ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é.
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: GET /schedule?group=–ú8–û-101–ê-24&week=5
    """
    group = request.args.get("group")
    week = request.args.get("week")
    if not group or not week:
        return jsonify({"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã group –∏ week –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    rows = query_db(
        """
        SELECT id, day, start_time, end_time, subject, teacher, room, event_type, recurrence_pattern, is_custom
        FROM schedule
        WHERE group_name = ? AND week = ?
        """,
        (group, week)
    )
    schedule = [
        {
            "id": row[0],
            "day": row[1],
            "start_time": row[2],
            "end_time": row[3],
            "subject": row[4],
            "teacher": row[5] if row[5] else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "room": row[6] if row[6] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
            "event_type": row[7],
            "recurrence_pattern": row[8],
            "is_custom": bool(row[9])
        }
        for row in rows
    ]
    return jsonify(schedule)


@app.route("/schedule", methods=["POST"])
@jwt_required()
def add_schedule():
    """
    ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è JSON:
      - group_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      - week: –Ω–µ–¥–µ–ª—è
      - day: –¥–µ–Ω—å
      - start_time: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:00")
      - end_time: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10:30")
      - subject: –ø—Ä–µ–¥–º–µ—Ç
      - teacher: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ —É–∫–∞–∑–∞–Ω")
      - room: –∞—É–¥–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
      - event_type: —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è ("—Ä–∞–∑–æ–≤–æ–µ" –∏–ª–∏ "–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "—Ä–∞–∑–æ–≤–æ–µ")
      - recurrence_pattern: —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é" –∏–ª–∏ "–ø–æ –≤–µ—Ä—Ö–Ω–µ–π/–Ω–∏–∂–Ω–µ–π", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
    """
    current_user = get_jwt_identity()
    role = current_user["role"]
    if role not in ["teacher", "admin"]:
        return jsonify({"msg": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"}), 403

    data = request.json
    execute_db(
        """
        INSERT INTO schedule (
            group_name, week, day, start_time, end_time, subject, teacher, room, event_type, recurrence_pattern, is_custom
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (
            data.get("group_name", ""),
            data["week"],
            data["day"],
            data["start_time"],
            data["end_time"],
            data["subject"],
            data.get("teacher", "–ù–µ —É–∫–∞–∑–∞–Ω"),
            data.get("room", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"),
            data.get("event_type", "—Ä–∞–∑–æ–≤–æ–µ"),
            data.get("recurrence_pattern", ""),
            1  # –ü—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_custom
        )
    )
    return jsonify({"msg": "–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"}), 201


@app.route("/schedule/<int:schedule_id>", methods=["PUT"])
@jwt_required()
def update_schedule(schedule_id):
    """
    ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Ç.–¥.).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π: group_name, week, day, start_time, end_time, subject, teacher, room, event_type, recurrence_pattern.
    """
    current_user = get_jwt_identity()
    role = current_user["role"]
    if role not in ["teacher", "admin"]:
        return jsonify({"msg": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"}), 403

    data = request.json
    fields = []
    values = []

    for key in ["group_name", "week", "day", "start_time", "end_time", "subject", "teacher", "room", "event_type",
                "recurrence_pattern"]:
        if key in data:
            fields.append(f"{key} = ?")
            values.append(data[key])

    if not fields:
        return jsonify({"msg": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400

    values.append(schedule_id)
    execute_db(f"UPDATE schedule SET {', '.join(fields)} WHERE id = ?", tuple(values))
    return jsonify({"msg": "–ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"}), 200


@app.route("/schedule/<int:schedule_id>", methods=["DELETE"])
@jwt_required()
def delete_schedule(schedule_id):
    """
    üóë –£–¥–∞–ª—è–µ—Ç –∑–∞–Ω—è—Ç–∏–µ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
    """
    current_user = get_jwt_identity()
    role = current_user["role"]
    if role not in ["teacher", "admin"]:
        return jsonify({"msg": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"}), 403

    execute_db("DELETE FROM schedule WHERE id = ?", (schedule_id,))
    return jsonify({"msg": "–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200


### ---------- –ê–£–î–ò–¢–û–†–ò–ò ---------- ###
@app.route("/occupied_rooms", methods=["GET"])
def get_occupied_rooms():
    """
    üìå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö IT-–∫–∞–±–∏–Ω–µ—Ç–æ–≤.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ occupied_rooms —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: week, day, start_time, end_time, room, subject, teacher, group_name.
    """
    rows = query_db("SELECT week, day, start_time, end_time, room, subject, teacher, group_name FROM occupied_rooms")
    return jsonify([
        {
            "week": row[0],
            "day": row[1],
            "start_time": row[2],
            "end_time": row[3],
            "room": row[4],
            "subject": row[5],
            "teacher": row[6],
            "group": row[7]
        }
        for row in rows
    ])


@app.route("/free_rooms", methods=["GET"])
def get_free_rooms():
    """
    ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö IT-–∫–∞–±–∏–Ω–µ—Ç–æ–≤.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ free_rooms —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: week, day, start_time, end_time, room.
    """
    rows = query_db("SELECT week, day, start_time, end_time, room FROM free_rooms")
    return jsonify([
        {
            "week": row[0],
            "day": row[1],
            "start_time": row[2],
            "end_time": row[3],
            "room": row[4]
        }
        for row in rows
    ])


### ---------- GOOGLE CALENDAR –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ---------- ###
@app.route("/calendar/sync_group", methods=["POST"])
@jwt_required()
def sync_group_calendar():
    """
    üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å Google Calendar.
    –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {"group": "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"}
    """
    data = request.json
    group = data.get("group")
    if not group:
        return jsonify({"error": "–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É"}), 400

    sync_group_to_calendar(group)
    return jsonify({"msg": f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar"})


### ---------- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---------- ###
if __name__ == "__main__":
    app.run(debug=True, port=5000)
